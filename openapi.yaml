openapi: 3.0.3
info:
  title: Auth Service API
  description: A scalable and modular authentication microservice built with Python. Features include user registration, login, JWT-based authentication, password hashing, and token refresh.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /:
    get:
      summary: Health check endpoint
      description: Returns a simple message to indicate that the service is running.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  Hello:
                    type: string
                example:
                  Hello: World

  /auth/signup:
    post:
      summary: User registration
      description: Register a new user account with username, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Bad request - Username or email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: User login
      description: Authenticate a user with username and password to receive access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized - Incorrect username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Obtain a new access token using a valid refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '200':
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized - Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: User logout
      description: Log out the current user (typically handled client-side by removing tokens).
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Logout successful

  /auth/me:
    get:
      summary: Get current user
      description: Retrieve information about the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserBase:
      type: object
      properties:
        username:
          type: string
          description: Unique username for the user
          example: johndoe
        email:
          type: string
          format: email
          description: Unique email address for the user
          example: john.doe@example.com
    
    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: Unique username for the user
          example: johndoe
        email:
          type: string
          format: email
          description: Unique email address for the user
          example: john.doe@example.com
        password:
          type: string
          format: password
          description: Password for the user account
          example: securePassword123!
    
    UserCreateResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          example: 1
        username:
          type: string
          description: Username of the user
          example: johndoe
        email:
          type: string
          format: email
          description: Email address of the user
          example: john.doe@example.com
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
    
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username of the user
          example: johndoe
        password:
          type: string
          format: password
          description: Password for the user account
          example: securePassword123!
    
    TokenRefresh:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Valid refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    
    Token:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token for authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refresh_token:
          type: string
          description: JWT refresh token for obtaining new access tokens
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        token_type:
          type: string
          description: Type of token
          example: bearer
    
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          example: 1
        username:
          type: string
          description: Username of the user
          example: johndoe
        email:
          type: string
          format: email
          description: Email address of the user
          example: john.doe@example.com
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
    
    Error:
      type: object
      properties:
        detail:
          type: string
          description: Error message
          example: "Username already registered"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT